name: VersionCheck
on:
  push:
    branches:
      - main
jobs:
  VersionCheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get ModuleVersion from Plugin.cs
        id: get_plugin_version
        run: |
          VERSION=$(grep -oP 'ModuleVersion => "\K[^"]+' GameModeManager/Plugin.cs)
          echo "plugin_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get Current Version from SECURITY.md
        id: get_security_current_version
        run: |
          VERSION=$(grep -oP '\- v\K[^ ]+(?= \*\*\(Current Version\)\*\*)' SECURITY.md)
          echo "security_current_version=$VERSION" >> $GITHUB_OUTPUT
        
      - name: Get Previous Version from SECURITY.md
        id: get_security_previous_version
        run: |
          VERSION=$(grep -oP '\- v\K[^ ]+(?= \*\*\(Previous Major Version\)\*\*)' SECURITY.md)
          echo "security_previous_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Calculate Expected Previous Version
        id: calculate_previous_version
        run: |
          CURRENT_VERSION="${{ steps.get_plugin_version.outputs.plugin_version }}"
          VERSION_PARTS=($(echo "$CURRENT_VERSION" | tr '.' ' '))
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          if [[ $PATCH -gt 0 ]]; then
            PREVIOUS_PATCH=$((PATCH - 1))
            EXPECTED_PREVIOUS_VERSION="$MAJOR.$MINOR.$PREVIOUS_PATCH"
          elif [[ $MINOR -gt 0 ]]; then
            PREVIOUS_MINOR=$((MINOR - 1))
            EXPECTED_PREVIOUS_VERSION="$MAJOR.$PREVIOUS_MINOR.0"
          else
            EXPECTED_PREVIOUS_VERSION="$MAJOR.0.0"
          fi
          echo "expected_previous_version=$EXPECTED_PREVIOUS_VERSION" >> $GITHUB_OUTPUT

      - name: Get ConfigVersion from Config.cs (Class Definition)
        id: get_config_class_version
        run: |
          CONFIG_CLASS_VERSION=$(grep -oP 'public int Version { get; set; } = \K\d+' GameModeManager/Config.cs)
          echo "config_class_version=$CONFIG_CLASS_VERSION" >> $GITHUB_OUTPUT

      - name: Get ConfigVersion from Config.cs (OnConfigParsed)
        id: get_config_parsed_version
        run: |
          CONFIG_PARSED_VERSION=$(grep -oP 'if \(_config.Version < \K\d+\)' GameModeManager/Plugin.cs)
          echo "config_parsed_version=$CONFIG_PARSED_VERSION" >> $GITHUB_OUTPUT

      - name: Check version consistency
        run: |
          PLUGIN_VERSION="${{ steps.get_plugin_version.outputs.plugin_version }}"
          SECURITY_CURRENT_VERSION="${{ steps.get_security_current_version.outputs.security_current_version }}"
          SECURITY_PREVIOUS_VERSION="${{ steps.get_security_previous_version.outputs.security_previous_version }}"
          EXPECTED_PREVIOUS_VERSION="${{ steps.calculate_previous_version.outputs.expected_previous_version }}"
          CONFIG_CLASS_VERSION="${{ steps.get_config_class_version.outputs.config_class_version }}"
          CONFIG_PARSED_VERSION="${{ steps.get_config_parsed_version.outputs.config_parsed_version }}"

          if [[ "$PLUGIN_VERSION" != "$SECURITY_CURRENT_VERSION" || "$SECURITY_PREVIOUS_VERSION" != "$EXPECTED_PREVIOUS_VERSION" ]]; then
            echo "Plugin version mismatch detected!"
            echo "Plugin.cs version: $PLUGIN_VERSION"
            echo "SECURITY.md Current Version: $SECURITY_CURRENT_VERSION"
            echo "SECURITY.md Previous Version: $SECURITY_PREVIOUS_VERSION"
            echo "Expected Previous Version: $EXPECTED_PREVIOUS_VERSION"
            exit 1 # Fail the workflow, preventing merge
          elif [[ "$CONFIG_CLASS_VERSION" != "$CONFIG_PARSED_VERSION" ]]; then
            echo "Config version mismatch detected!"
            echo "Config.cs (Class) Version: $CONFIG_CLASS_VERSION"
            echo "Config.cs (Parsed) Version: $CONFIG_PARSED_VERSION"
            exit 1 # Fail the workflow, preventing merge
          else
            echo "Versions are consistent."
          fi

name: NewRelease
on:
  push:
    branches:
      - main
    paths:
      - 'GameModeManager/Plugin.cs'
jobs:
  NewRelease:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Get current ModuleVersion from Plugin.cs
        id: get_current_version
        run: |
          VERSION=$(grep -oP 'ModuleVersion => "\K[^"]+' GameModeManager/Plugin.cs)
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get previous ModuleVersion from Plugin.cs
        id: get_previous_version
        run: |
          VERSION=$(git show HEAD~1:GameModeManager/Plugin.cs | grep -oP 'ModuleVersion => "\K[^"]+')
          echo "previous_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get current ConfigVersion from Config.cs
        id: get_current_config_version
        run: |
          CONFIG_VERSION=$(grep -oP 'public int Version { get; set; } = \K\d+' GameModeManager/Config.cs)
          echo "current_config_version=$CONFIG_VERSION" >> $GITHUB_OUTPUT

      - name: Get previous ConfigVersion from Config.cs
        id: get_previous_config_version
        run: |
          CONFIG_VERSION=$(git show HEAD~1:GameModeManager/Config.cs | grep -oP 'public int Version { get; set; } = \K\d+' GameModeManager/Config.cs)
          echo "previous_config_version=$CONFIG_VERSION" >> $GITHUB_OUTPUT

      - name: Check if version changed
        id: check_version_change
        run: |
          CURRENT_VERSION="${{ steps.get_current_version.outputs.current_version }}"
          PREVIOUS_VERSION="${{ steps.get_previous_version.outputs.previous_version }}"
          if [[ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Check config version changed
        id: check_config_version_change
        run: |
          CURRENT_CONFIG_VERSION="${{ steps.get_current_config_version.outputs.current_config_version }}"
          PREVIOUS_CONFIG_VERSION="${{ steps.get_previous_config_version.outputs.previous_config_version }}"
          if [[ "$CURRENT_CONFIG_VERSION" != "$PREVIOUS_CONFIG_VERSION" ]]; then
            echo "config_version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "config_version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Get commit history
        if: ${{ steps.check_version_change.outputs.version_changed == 'true' }}
        id: get_commit_history
        run: |
          COMMIT_HISTORY=$(git log --pretty=format:"%s" HEAD~1..HEAD)
          echo "commit_history=$(echo "$COMMIT_HISTORY" | jq -sRr @uri)" >> $GITHUB_OUTPUT

      - name: Parse commit history
        if: ${{ steps.check_version_change.outputs.version_changed == 'true' }}
        id: parse_commits
        run: |
          COMMIT_HISTORY="${{ steps.get_commit_history.outputs.commit_history }}"
          FEATURES=""
          BUG_FIXES=""
          MISC=""

          IFS=$'\n'
          for COMMIT in $(echo "$COMMIT_HISTORY"); do
            if [[ "$COMMIT" == ADDED:* || "$COMMIT" == Added:* ]]; then
              FEATURES="$FEATURES- $(echo "$COMMIT" | cut -d':' -f2-)\n"
            elif [[ "$COMMIT" == Fix:* || "$COMMIT" == Bug:* || "$COMMIT" == BugFix:* ]]; then
              BUG_FIXES="$BUG_FIXES- $(echo "$COMMIT" | cut -d':' -f2-)\n"
            else
              MISC="$MISC- $COMMIT\n"
            fi
          done

          echo "features=$(echo "$FEATURES" | jq -sRr @uri)" >> $GITHUB_OUTPUT
          echo "bug_fixes=$(echo "$BUG_FIXES" | jq -sRr @uri)" >> $GITHUB_OUTPUT
          echo "misc=$(echo "$MISC" | jq -sRr @uri)" >> $GITHUB_OUTPUT

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore GameModeManager.sln

      - name: Build solution
        run: dotnet build --configuration Debug GameModeManager.sln

      - name: Create ZIP archive
        if: ${{ steps.check_version_change.outputs.version_changed == 'true' }}
        run: |
          zip -r GameModeManager_v${{ steps.get_current_version.outputs.current_version }}.zip bin/Debug/net8.0/Public

      - name: Create Release
        if: ${{ steps.check_version_change.outputs.version_changed == 'true' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_current_version.outputs.current_version }}
          release_name: Release Game Mode Manager v${{ steps.get_current_version.outputs.current_version }}
          body: |
            # Game Mode Manager v${{ steps.get_current_version.outputs.current_version }}
            ${{ steps.check_config_version_change.outputs.config_version_changed == 'true' && '> [!IMPORTANT]
            > - If moving from v${{ steps.get_previous_version.outputs.previous_version }} or earlier, back up your `GameModeManager.json` configuration file and let the plugin generate the new version. This version has minor changes to the configuration file.
            >' || '' }}

            ## Features
            ${{ steps.parse_commits.outputs.features }}

            ## Bug Fixes
            ${{ steps.parse_commits.outputs.bug_fixes }}

            ## Misc
            ${{ steps.parse_commits.outputs.misc }}

            ## Installation
            1. Install Metamod:Source and Counter Strike Sharp.
            2. Copy `addons` and `cfg` folders to `/csgo/`.
            3. Make sure your `gamemodes_server.txt` or custom map group file is in [VDF Format](https://developer.valvesoftware.com/wiki/VDF) and contains a list of map groups.
            5. Update each game mode configuration file (i.e. comp.cfg) to include `css_gamemode <mode>`.
            6. After the first run, update the configuration file `GameModeManager.json`.

            For more information on the configuration of these features, please see the updated [README.md](https://github.com/nickj609/GameModeManager/blob/main/README.md).

            **Full Changelog**: https://github.com/nickj609/GameModeManager/compare/v${{ steps.get_previous_version.outputs.previous_version }}...v${{ steps.get_current_version.outputs.current_version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: ${{ steps.check_version_change.outputs.version_changed == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: GameModeManager_v${{ steps.get_current_version.outputs.current_version }}.zip
          asset_name: GameModeManager_v${{ steps.get_current_version.outputs.current_version }}.zip
          asset_content_type: application/zip
